<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>About me</title>
    <link href="./2022/09/23/BitTorrent%E5%8D%8F%E8%AE%AE/"/>
    <url>./2022/09/23/BitTorrent%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>最近经常会下载一些电影，都是通过一个torrent文件+迅雷下载的，这个torrent文件被称为BT种子，说实话这个名字非常熟悉，中学时经常会听到朋友说起，比如有没有种子什么的😅，但是我一直不太了解这种下载方式。这几天使用这种方式下载的时候，发现和一般通过http协议下载的方式有很大不同，于是我就不禁好奇起来，这种下载方式是如何工作的呢？</p><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><p>这种下载方式依托于<a href="https://en.wikipedia.org/wiki/BitTorrent">BitTorrent</a>协议，BitTorrent是一种internet transfer protocol，同样作为一种transfer protocol，BitTorrent与http,ftp(file transfer protocol)这些协议最大的不同在于<strong>BitTorrent是一种distributed transfer protocol（分布式传输协议），什么意思呢</strong>？<br>http/FTP protocol都是让用户从一个目标站点的服务器上下载文件，而当用户过多时，就会超出服务器的带宽限制，导致下载出现问题；而BitTorrent将文件分片，每个用户都会下载文件的分片，在下载时也会将自己的文件分片发给其他正在下载的用户，这就形成了一种<strong>图结构</strong>，<strong>点对点式</strong>（<a href="https://en.wikipedia.org/wiki/Peer-to-peer">Peer-to-peer</a>）的分发文件分片： <img src="https://cdn.nlark.com/yuque/0/2022/png/12749343/1656582551401-a3ff0de7-d25b-45c2-a2ff-b720418b5212.png#clientId=uec38538c-ad44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=295&id=u3e3be495&margin=%5Bobject%20Object%5D&name=image.png&originHeight=369&originWidth=454&originalType=url&ratio=1&rotation=0&showTitle=false&size=119176&status=done&style=none&taskId=ub9018044-e71c-4b69-a5fc-030c21d9a0c&title=&width=363" title="" alt="image.png" data-align="center"><br>正是由于这一特性，BitTorrent在大文件下载和多人同时下载时有非常好的表现。</p><h1 id="Torrent文件"><a href="#Torrent文件" class="headerlink" title="Torrent文件"></a>Torrent文件</h1><p>torrent文件，也就是所谓的BT种子，是我们了解这种下载方式的关键，所以下面就来简单介绍一下这种文件的格式与结构。</p><h2 id="编码方式：bencoding"><a href="#编码方式：bencoding" class="headerlink" title="编码方式：bencoding"></a>编码方式：bencoding</h2><p>torrent文件的编码格式是bencoding,这种编码由ASCII码进行编码，包含以下数据结构：</p><table><thead><tr><th><strong>string</strong></th><th>字符串”hello”在bencoding中就是5:hello，即长度标识+:+字符串</th></tr></thead><tbody><tr><td><strong>integer</strong></td><td>i开头,e结尾，比如123就可以用i123e表示，456用i456e表示</td></tr><tr><td><strong>List</strong></td><td>l开头,e结尾，比如[132,”hello”]就表示为li123e5:helloe</td></tr><tr><td><strong>Dictionary</strong></td><td>d开头,e结尾，key必须是string,value可以是四种数据结构的任意一种，比如{‘fruit’:5,’meat’:8}就可表示为d5:fruiti5e4:meati8ee。除此之外，还要注意，Dictionary必须是有序字典，所有key必须按<a href="https://zh.m.wikipedia.org/wiki/%E5%AD%97%E5%85%B8%E5%BA%8F">字典序</a>升序排列。</td></tr></tbody></table><p>虽然Bencoding比用纯二进制编码效率低，但由于结构简单而且不受字节存储顺序影响（所有数字以十进制编码，不存在<a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F">大端小端的问题</a>），因此具有很好的跨平台性，而且具有较好的灵活性，即使存在故障的字典键，只要将其忽略并更换新的就能兼容补充。</p><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><p>torrent文件本身是一个字典，类似于Json,里面包含了一些key，那么具体包含哪些key呢？首先我们直接打开一个torrent文件:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12749343/1656582551206-681b1712-ff7a-4425-9b53-b8c2c5f8209c.png#clientId=uec38538c-ad44-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u841fce0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=601&originWidth=1544&originalType=url&ratio=1&rotation=0&showTitle=false&size=297838&status=done&style=none&taskId=ubd188d94-1d88-48b5-9118-b9bd2e609c1&title=" alt="image.png"><br>可以看到除了第一行以外，全都是乱码，说明这是一个二进制文件。我们现在已经知道了torrent文件是用Bencoding方式编码的，通过解析器(留个坑)，就可以将其转化为可读的格式:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&#123;<br>    <span class="hljs-string">&quot;announce&quot;</span>: <span class="hljs-string">&quot;udp://engplus.ru:6969/announce&quot;</span>,<br>    <span class="hljs-string">&quot;announce-list&quot;</span>: [<br>        [<br>            <span class="hljs-string">&quot;udp://engplus.ru:6969/announce&quot;</span><br>        ],<br>        [<br>            <span class="hljs-string">&quot;udp://cutiegirl.ru:6969/announce&quot;</span><br>        ],<br>        [<br>            <span class="hljs-string">&quot;udp://bubu.mapfactor.com:6969/announce&quot;</span><br>        ],<br>        [<br>            <span class="hljs-string">&quot;udp://bt2.archive.org:6969/announce&quot;</span><br>        ]<br>    ],<br>    <span class="hljs-string">&quot;created by&quot;</span>: <span class="hljs-string">&quot;qBittorrent v4.3.91&quot;</span>,<br>    <span class="hljs-string">&quot;creation date&quot;</span>: <span class="hljs-string">&quot;2021-02-12 03:02:32&quot;</span>,<br>    <span class="hljs-string">&quot;info_hash&quot;</span>: <span class="hljs-string">&quot;7cda8188321724d1ce7a0ab0b4f9208023dd1521&quot;</span>,<br>    <span class="hljs-string">&quot;info&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;length&quot;</span>: <span class="hljs-number">4936930690</span>,<br>        <span class="hljs-string">&quot;path&quot;</span>: [<span class="hljs-string">&quot;BT\u4e16\u754c\u7f51(btsj5.com).txt&quot;</span>],<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;\u91dc\u5c71\u884c.\u7279\u6548\u5b57\u5e55.2016.BD1080P.AAC.x264.CHS.BTSJ5&quot;</span>,<br>        <span class="hljs-string">&quot;piece length&quot;</span>: <span class="hljs-number">1048576</span>,<br>        <span class="hljs-string">&quot;pieces&quot;</span>: [<br>            <span class="hljs-string">&quot;10e72eba2cbdc9d9b9791706fcbfb84e51093c86&quot;</span>,<br>            <span class="hljs-string">&quot;d91472ddd5e943caa54f8520fcb35fb106033cf2&quot;</span>,<br>            <span class="hljs-string">&quot;214e6470e412215c9cf462ea752adc6a7c90e92f&quot;</span>,<br>            <span class="hljs-string">&quot;214e6470e412215c9cf462ea752adc6a7c90e92f&quot;</span>,<br>            <span class="hljs-string">&quot;903012943eab4ed903f1bc35079f6075f01da4ff&quot;</span>,<br>            <span class="hljs-string">&quot;d118c6af14e0f3e06f8008e712322d06088d9c05&quot;</span>,<br>            <span class="hljs-string">&quot;500813dd3b29e0c88e0127a2fdf7851be2472a58&quot;</span>,<br>            <span class="hljs-string">&quot;…………&quot;</span><br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面我们可以看出一些torrent的字段，下面进行一个汇总：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12749343/1656582551253-d1b587ad-d889-471a-8b09-62944ccdc097.png#clientId=uec38538c-ad44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=471&id=u7ab00c8f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=709&originWidth=958&originalType=url&ratio=1&rotation=0&showTitle=false&size=64670&status=done&style=none&taskId=u61a075d2-d7a3-4780-b0d7-bbcbd9d097f&title=&width=637" alt="image.png"></p><h1 id="BT下载流程"><a href="#BT下载流程" class="headerlink" title="BT下载流程"></a>BT下载流程</h1><h2 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a>简单概述</h2><p>整个的一个BT下载流程是怎样的呢？</p><ol><li><p>制作Torrent种子文件，制作的过程中要指定发布的文件or文件夹、Tracker URL（即announce字段）、是否启用DHT等等。除此之外，还要将要发布的文件切成块（一般是256KB），用SHA1哈希算法计算每块的哈希值，最后上传到Tracker服务器。</p></li><li><p>BT客户端（如迅雷）得到.torrent文件后，就会根据文件中的announce字段找到Tracker服务器地址（连接方式有UDP也有HTTP），然后客户端就会通过Tracker GET请求得到服务，发送哈希值给Tracker，让其查找。</p></li><li><p>在找到哈希信息后，Tracker服务器就会反连客户端的IP地址和Port（如果是公网），然后返回正在下载这个文件的所有公网用户的IP地址和Port List,之后会将这个客户端的IP地址和Port保存下来，供其他人使用。</p></li><li><p>BT客户端得到这些其他用户IP后，就可以直接连接到这些IP和端口下载资料了。BT客户端会到所有的用户去寻找自己要下载的东西。BT客户端每找到一个用户就建立一个Socket来下载，所以下载的人越多，速度就越快。</p><h2 id="peer之间的通信"><a href="#peer之间的通信" class="headerlink" title="peer之间的通信"></a>peer之间的通信</h2><p>下面来看一下点与点之间是如何建立连接的。在使用BT协议下载时，所有正在下载同一资源的peer都是对等的，两个peer之间相互建立的连接也是对等的，对等节点建立的连接的数据传输方向也是双向的，数据可由任何一端发送到另一端。<br>首先是TCP层的连接，当一个客户端向其他peer发送一个TCP连接请求，这个请求由以下字段组成：</p><blockquote><ol><li>pstrlen,固定值为19B</li><li>pstr,值为”BitTorrent protocol”</li><li>reserved，保留8字节字段，一般全设置为0、</li><li>info_hash，必须与请求Tracker时发送的info_hash相同</li><li>peer_id，必须与请求Tracker时发送的peer_id相同</li></ol></blockquote></li></ol><p>在发送上述握手后，应该会受到相同格式的握手，然后我们就将返回的info_hash和发送的进行匹配，以此来确定是否是同一文件，若没问题，那么就握手成功。握手成功后，就会进行<strong>数据的传输</strong>：<br>:::info</p><ol><li><p>提供数据的peer会对下载者发送Bitfield，告诉自己拥有的这个文件的哪些块，这些信息就用Bitfield存储（一个二进制bit数组，数组值为1就表示有这个块）。</p></li><li><p>初始化状态下，BT客户端对其他的peer都是<strong>choked状态</strong>（阻断）。当下载者准备好了，就会发送<strong>Unchoked消息</strong>，可以进行消息传输。</p></li><li><p>下载者发送Interested消息，告诉提供数据的peer自己要开始下载了。</p></li><li><p>下载者发送Request消息，其中Payload包含具体的某个块的信息（序号，begin,length）。</p></li><li><p>提供数据的peer向下载者发送Piece，即真正的块数据。<br>:::</p><h1 id="DHT网络和磁力链接"><a href="#DHT网络和磁力链接" class="headerlink" title="DHT网络和磁力链接"></a>DHT网络和磁力链接</h1><h2 id="DHT网络"><a href="#DHT网络" class="headerlink" title="DHT网络"></a>DHT网络</h2><p>通过上面对BitTorrent的简单介绍，我们发现BT十分依赖于Tracker服务器，如果Tracker服务器全挂彩了，那么BT也就没用了，也没有办法解决这个问题呢？<br>DHT，即<strong>全称分布式哈希表</strong>(Distributed Hash Table)可以有效地解决这个问题，其示意图如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12749343/1656582551468-8b339269-c22e-4c40-9dfc-a670e07f7743.png#clientId=uec38538c-ad44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=274&id=ud42f7634&margin=%5Bobject%20Object%5D&name=image.png&originHeight=519&originWidth=1238&originalType=url&ratio=1&rotation=0&showTitle=false&size=135811&status=done&style=none&taskId=uc70e81a3-a6ab-4043-b639-c72a76ef98b&title=&width=653" alt="image.png"><br>DHT是一种分布式存储方法，在不需要服务器的情况下，每个节点负责一个小范围的路由，并负责存储一小部分数据，从而实现整个DHT网络的寻址和存储。在DHT网络中，每一个peer都是一个Node，有自己的哈希值。每个Node即是上传和下载piece的BT下载节点；也是<strong>一个小型Tracker，其会保留自己附近的一部分节点信息</strong>。<br>实现DHT的一种算法：<a href="https://www.tribler.org/Khashmir/">Khashmir</a>，简单介绍一下：<br>DHT的每个节点都保存了一张表，上面记录着自己周围节点的ID，当我们向节点A查询B的信息时，就会检索A的表看看有没有B，有就返回B的信息；<strong>没有就返回距离B最近（用XOR计算）的k个节点，然后继续向着k个节点寻找B</strong>。</p><h2 id="磁力链接"><a href="#磁力链接" class="headerlink" title="磁力链接"></a>磁力链接</h2><p>2009年，作为世界第一Tracker服务商海盗湾，关闭了Tracker服务器，因为涉及侵权问题，随后基于DHT网络的<strong>磁力链接</strong>（Magnet URI scheme）就走上了主流舞台，目前已经成为最流行的下载方式。<br>例如有这样一串链接：magnet:?xt=urn:btih:53SWOUDWKG6ORSKTJHHE3QXTIBOGU5WU</p></li></ol><ul><li><p>magnet是协议名，xt是资源定位点，urn:btih是Hash方法</p></li><li><p>后面的一串40位16进制数是本文件内容的Hash值，BT下载客户端就是根据这个Hash值在DHT中定位下载文件。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/riba2534/article/details/115602512?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165154457716781685369761%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165154457716781685369761&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115602512.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=BitTorrent&spm=1018.2226.3001.4187">BitTorrent 简介</a><br>[2] <a href="https://en.wikipedia.org/wiki/BitTorrent#Design">https://en.wikipedia.org/wiki/BitTorrent#Design</a><br>[3] <a href="https://zh.m.wikipedia.org/wiki/%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5">磁力链接 - 维基百科，自由的百科全书</a><br>[4] <a href="https://trackerslist.com/#/zh">XIU2/TrackersListCollection</a></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章内容主要用于总结一些BitTorrent协议和DHT协议的相关知识，由于还未深入学习计算机网络，一些细节的了解还不是很到位，等我到时候学了计算机网络再来深入学习一下😄，这里先留个坑。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NetWork</tag>
      
      <tag>BitTorrent</tag>
      
      <tag>Magnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
